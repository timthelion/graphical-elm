{- Copyright info at bottom of file -}
module ParserAndCompiler.Parser where
{-|
Graphical elm formats its files in a special subset of elm code. The saved files are both valid Elm which can be compiled and also valid graphical elm which can be imported and edited using the graphical elm editor.  There are multiple versions of this format. Graphical elm always generates the latest version but supports opening old versions.  One constant, however, is the file header which is a single line at the top of the file of format:

{- GENERATED BY GRAPHICAL ELM 0.0 -}

This header includes the version of the file format which has been used to save the file.

This module acts as a kind of router. It reads the header, determining the version of the graphical-elm file format used then it launches the correct version of the actual parser.
-}

{- base libraries -}
import String
import Either

{- external libraries -}
import open Parsers.ContinuationParser
import open Parsers.ContinuationParser.Specifics.Lexemes
import Parsers.ContinuationParser.LexemeEaters as LE
import Parsers.ContinuationParser.PositionMarking as PM

{- internal modules -}
import State.EditorState as ES
import ParserAndCompiler.Types as PT
import ParserAndCompiler.Constants as Constants
 {- the various parser versions -}
import ParserAndCompiler.Parser.Version0p0 as V0p0
import ParserAndCompiler.Parser.Version1p0 as V1p0


t = PM.standardTaker

parseSavedGraph: String -> Either.Either String ES.EditorState
parseSavedGraph contents =
 ((String.toList contents |> PM.charsToPositionMarkedChars)
   `parse`
  (takeHeader <| \ version _ ->
   if | version == V0p0.version ->
        return <| case V0p0.parseSavedGraph contents of
                   Either.Left error -> ParseError error
                   Either.Right editorState -> Parsed editorState

      | version == V1p0.version ->
        V1p0.parseSavedGraph

      | otherwise ->
        return <|
        ParseError <| "Graphs saved using format version"
                   ++ PT.showVersion version
                   ++ "not supported."
 )) |> \ result ->
 case result of
  Parsed editorState -> Either.Right editorState
  ParseError err -> Either.Left err
  EndOfInputBeforeResultReached ->
   Either.Left "Unexpected end of input."

takeHeader: ContinuationParser (PM.PositionMarked Char) PT.Version Char ES.EditorState
takeHeader continuation =
 t.take (LE.exactMatch <| String.toList Constants.headerPrefix) <| \ _ _ ->
 t.take int <| \ majorVersion transition ->
 if | transition == '.' ->
  fastforward 1 <|
  t.take int <| \ minorVersion _ -> 
  t.take (LE.exactMatch (String.toList <| Constants.headerPostfix++"\n")) <| \ _ transition ->
  continuation {major=majorVersion,minor=minorVersion} transition
    | otherwise -> PM.parseErrorAts <| "Unexpeced input:" ++ (show transition)
