module CodeGenerator where
import open Graph
import open List
import Either

header = "{-GENERATED BY GRAPHICALELM0.0-}"

headerLength = length header

generateCode: Graph -> String
generateCode gnodes
 = header ++ "\n" ++
 (concat <| map generateNodeCode gnodes)

generateNodeCode: Node -> String
generateNodeCode node =
 case node.value.language of
   ElmLang -> node.name++"="++node.value.code++"{-_language_"++show node.value.language++"_base_code_#####$#"++node.value.code++"#$#####_parents_-}"++(concat <| intersperse "~" node.parents)++"{-*****-}\n"
   _ -> "{- ERROR no generator availiable. -}"

parseSavedGraph: String -> Either.Either String Graph
parseSavedGraph content =
 if take headerLength content == header
 then
  Either.Right
  (  split "{-*****-}" (drop headerLength content)
  |> map parseSavedNode
  |> Either.rights)
 else Either.Left <| "Error loading file: Header does not match."

parseSavedNode: String -> Either.Either String Node
parseSavedNode raw =
 let
  headSplit = split "=" <| drop 1 raw
  name = head headSplit
 in
 if raw == []
 then Either.Left ""
 else
 case split "{-_language_" (head <| drop 1 headSplit) of
  (_::raw'::[]) ->-- Either.Left <| show headSplit
   let
    languageString = head <| split "_base_code_" raw'
    language =
     if | languageString == "ElmLang" -> ElmLang
        | languageString == "FooLang" -> FooLang
    code = inQuotes "#####$#" "#$#####" raw'
    parents =
     case split "_parents_-}" raw' of
      (_::raw''::[]) -> split "~" raw''
   in Either.Right {name=name,parents=parents,value={code=code,language=language}}
  _ -> Either.Left <| "Parse error, cannot parse:" ++ raw


inQuotes: String -> String -> String -> String
inQuotes startQuote endQuote fullString =
 case split startQuote fullString of
  (_::afterQuote::[]) ->
   case split endQuote afterQuote of
    (inQuotes'::_) -> inQuotes'

