{-
This module provides utilities for:
 - Generating Elm code from internal data structures.
 - Parsing that generated Elm code.
-}
module CodeGenerator where
import open Graph
import Ikcilpazc
import String
import List
import Either

header = "{-GENERATED BY GRAPHICALELM0.0-}"

headerLength = String.length header

generateCode: Graph -> String
generateCode gnodes
 =
 let
  nodeCodesE = map generateNodeCode gnodes
  errors = Either.lefts nodeCodesE
  nodeCodes = Either.rights nodeCodesE
 in
 if | length errors == 0 ->
      header ++ "\n" ++
      (concat <| nodeCodes)
    | otherwise -> concat <| errors

generateNodeCode: Node -> Either.Either String String
generateNodeCode node =
 case (case node.value.language of
   ElmLang -> Either.Right (node.value.code)
   Ikcilpazc -> Ikcilpazc.gen node) of
  Either.Right code -> Either.Right <| node.name++"="++ code ++ "{-_language_"++show node.value.language++"_base_code_#####$#"++node.value.code++"#$#####_parents_-}"++(concat <| intersperse "~" node.parents)++"{-*****-}\n"
  Either.Left err -> Either.Left err

parseSavedGraph: String -> Either.Either String Graph
parseSavedGraph content =
 if String.startsWith header content
 then
  Either.Right
  (  String.split "{-*****-}" (String.dropLeft headerLength content)
  |> map parseSavedNode
  |> Either.rights)
 else Either.Left <| "Error loading file: Header does not match."

parseSavedNode: String -> Either.Either String Node
parseSavedNode raw =
 let
  headSplit = String.split "=" <| String.dropLeft 1 raw
  name = head headSplit
 in
 if raw == ""
 then Either.Left ""
 else
 case String.split "{-_language_" (head <| List.drop 1 headSplit) of
  (_::raw'::[]) ->-- Either.Left <| show headSplit
   let
    languageString = head <| String.split "_base_code_" raw'
    language =
     if | languageString == "ElmLang" -> ElmLang
        | languageString == "Ikcilpazc" -> Ikcilpazc
    code = inQuotes "#####$#" "#$#####" raw'
    parents' =
     case String.split "_parents_-}" raw' of
      (_::raw''::[]) -> String.split "~" raw''
    parents =
     case parents' of
      (p::[]) -> if | p == "" -> []
                    | otherwise -> parents'
      _ -> parents'
   in Either.Right {name=name,parents=parents,value={code=code,language=language}}
  _ -> Either.Left <| "Parse error, cannot parse:" ++ raw


inQuotes: String -> String -> String -> String
inQuotes startQuote endQuote fullString =
 case String.split startQuote fullString of
  (_::afterQuote::[]) ->
   case String.split endQuote afterQuote of
    (inQuotes'::_) -> inQuotes'
{-
Graphical ELM - A program for editing graphs as graphs.
Visually, Architecturally

    Copyright (C) 2013  Timothy Hobbs <timothyhobbs@seznam.cz> thobbs.cz

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-}